import{_ as e,c as a,o as t,a4 as o}from"./chunks/framework.Bkp5Egd4.js";const m=JSON.parse('{"title":"跨域","description":"","frontmatter":{},"headers":[],"relativePath":"js/跨域.md","filePath":"js/跨域.md","lastUpdated":null}'),r={name:"js/跨域.md"},s=o('<h1 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h1><h2 id="浏览器的同源策略" tabindex="-1">浏览器的同源策略 <a class="header-anchor" href="#浏览器的同源策略" aria-label="Permalink to &quot;浏览器的同源策略&quot;">​</a></h2><blockquote><p>同源策略是一个重要的安全策略，它用于限制一个源的文档或者它加载的脚本如何能与另一个源的资源进行交互。帮助阻隔恶意文档，减少可能被攻击的媒介。</p></blockquote><p>同源策略是URL的<strong>协议</strong>、<strong>端口</strong>和<strong>域名</strong>一致，则是同源。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noreferrer">浏览器的同源策略</a></li></ol>',6),n=[s];function l(i,_,c,d,h,p){return t(),a("div",null,n)}const f=e(r,[["render",l]]);export{m as __pageData,f as default};

import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.Bkp5Egd4.js";const u=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"ts/数据类型.md","filePath":"ts/数据类型.md","lastUpdated":null}'),t={name:"ts/数据类型.md"},n=e(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="type-和-interface-的区别" tabindex="-1">Type 和 Interface 的区别 <a class="header-anchor" href="#type-和-interface-的区别" aria-label="Permalink to &quot;Type 和 Interface 的区别&quot;">​</a></h2><h3 id="一、声明方式" tabindex="-1">一、声明方式 <a class="header-anchor" href="#一、声明方式" aria-label="Permalink to &quot;一、声明方式&quot;">​</a></h3><ul><li><code>type</code> 定义类型别名, 可以为基本类型、联合类型、交叉类型等复杂类型提供一个名称</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>interface</code> 定义接口，主要用于描述对象的结构</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>二、扩展</p><ul><li><code>type</code> 可以使用交叉类型&amp;扩展</li><li><code>interface</code> 使用 <code>extends</code> 扩展</li></ul><p>三、合并声明</p><ul><li><code>type</code> 不能进行合并声明，同名的 <code>type</code> 会导致错误。</li><li><code>interface</code> 可以进行合并声明，同名的 <code>interface</code> 会自动合并，合并后的接口包含所有声明的属性。</li></ul><div class="tip custom-block"><p class="custom-block-title">总结</p><p><code>type</code> 和 <code>interface</code> 在 TypeScript 中都可以用于定义复杂类型，但它们在声明方式、扩展、合并声明和类型表示等方面有所不同。<code>type</code> 更灵活，支持更多类型表示，而 <code>interface</code> 更适用于描述对象结构，可以进行合并声明。</p></div><h2 id="object类型和object类型的区别" tabindex="-1">object类型和Object类型的区别 <a class="header-anchor" href="#object类型和object类型的区别" aria-label="Permalink to &quot;object类型和Object类型的区别&quot;">​</a></h2><blockquote><p>在 TypeScript 中，object类型是指非原始类型，即除了 number、string、boolean、symbol、null 和 undefined 之外的类型。而 Object 类型是 JavaScript 中的全局对象类型，包含了一些内置方法和属性（如 toString() 和 valueOf()），可以进行类型转换。</p></blockquote>`,14),l=[n];function p(h,c,o,d,r,k){return a(),i("div",null,l)}const g=s(t,[["render",p]]);export{u as __pageData,g as default};

import{_ as e,c as a,o as t,a4 as i}from"./chunks/framework.Bkp5Egd4.js";const p=JSON.parse('{"title":"虚拟DOM和Diff算法","description":"","frontmatter":{},"headers":[],"relativePath":"vue/Diff算法.md","filePath":"vue/Diff算法.md","lastUpdated":null}'),o={name:"vue/Diff算法.md"},l=i('<h1 id="虚拟dom和diff算法" tabindex="-1">虚拟DOM和Diff算法 <a class="header-anchor" href="#虚拟dom和diff算法" aria-label="Permalink to &quot;虚拟DOM和Diff算法&quot;">​</a></h1><h2 id="虚拟dom" tabindex="-1">虚拟DOM <a class="header-anchor" href="#虚拟dom" aria-label="Permalink to &quot;虚拟DOM&quot;">​</a></h2><blockquote><p>用来表示真是DOM的对象</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>虚拟DOM算法操作真实DOM，性能高于直接操作真实DOM<br> 虚拟DOM算法 = 虚拟DOM + Diff算法</p></div><h2 id="diff算法" tabindex="-1">Diff算法 <a class="header-anchor" href="#diff算法" aria-label="Permalink to &quot;Diff算法&quot;">​</a></h2><blockquote><p>Diff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。 <br>vue 虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较更新时，就用到了该算法</p></blockquote><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><p>diff整体策略为：深度优先，同层比较</p><ul><li>比较只会在同层级进行，不会跨级比较</li><li>diff比较中，循环从两边向中间收拢</li></ul><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ol><li><a href="https://vue3js.cn/interview/vue/diff.html" target="_blank" rel="noreferrer">面试官：你了解vue的diff算法吗？说说看</a></li></ol>',11),r=[l];function f(d,c,s,n,h,u){return t(),a("div",null,r)}const D=e(o,[["render",f]]);export{p as __pageData,D as default};

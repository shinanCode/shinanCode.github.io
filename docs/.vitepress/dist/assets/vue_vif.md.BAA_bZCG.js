import{_ as e,c as o,o as a,a4 as t}from"./chunks/framework.Bkp5Egd4.js";const _=JSON.parse('{"title":"v-if和v-show区别","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vif.md","filePath":"vue/vif.md","lastUpdated":null}'),i={name:"vue/vif.md"},s=t('<h1 id="v-if和v-show区别" tabindex="-1">v-if和v-show区别 <a class="header-anchor" href="#v-if和v-show区别" aria-label="Permalink to &quot;v-if和v-show区别&quot;">​</a></h1><blockquote><p>v-if和v-show都是通过boolean控制dom的显示隐藏</p></blockquote><h2 id="两者区别" tabindex="-1">两者区别 <a class="header-anchor" href="#两者区别" aria-label="Permalink to &quot;两者区别&quot;">​</a></h2><p><code>v-show</code>通过css <code>display:none/block</code>切换显示隐藏，<code>dom</code>元素一致存在。<br><code>v-if</code>是将<code>dom</code>元素的销毁和重建的过程。</p><div class="tip custom-block"><p class="custom-block-title">性能消耗</p><p>v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</p></div><h2 id="场景使用" tabindex="-1">场景使用 <a class="header-anchor" href="#场景使用" aria-label="Permalink to &quot;场景使用&quot;">​</a></h2><p>v-if 与 v-show 都能控制dom元素在页面的显示</p><p>v-if 相比 v-show 开销更大的（直接操作dom节点增加与删除）</p><p>如果需要非常频繁地切换，则使用 v-show 较好</p><p>如果在运行时条件很少改变，则使用 v-if 较好</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ol><li><a href="https://vue3js.cn/interview/vue/show_if.html#%E4%B8%89%E3%80%81v-show%E4%B8%8Ev-if%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90" target="_blank" rel="noreferrer">面试官：v-show和v-if有什么区别？使用场景分别是什么？</a></li></ol>',12),c=[s];function r(d,l,h,v,n,f){return a(),o("div",null,c)}const u=e(i,[["render",r]]);export{_ as __pageData,u as default};
